@model Matterspace.Models.ProductViewModel

@{
    Layout = "~/Views/Shared/_LayoutContainer.cshtml";
}

@Html.Partial("~/Views/Shared/Product/_ProductPartial.cshtml", Model)

<div class="product-home-wrapper">
    <div class="product-body">
        <div class="product-nav-content">


            <div class="row">
                <div class="col-main">
                    <div class="input-group">
                        <div class="input-group-btn">
                            <button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Ideas
                            </button>
                            <div class="dropdown-menu">
                                <a class="dropdown-item" href="#">All ideas</a>
                                <a class="dropdown-item" href="#">Pending ideas</a>
                                <a class="dropdown-item" href="#">Accepted ideas</a>
                                <a class="dropdown-item" href="#">Your ideas</a>
                            </div>
                        </div>
                        <input type="text" class="form-control" placeholder="Search for ideas">
                    </div>
                </div>
                <div class="col-side">
                    <a class="btn btn-success btn-block" href="@Url.Action("New")">
                        <i class="fa fa-plus" aria-hidden="true"></i>
                        New idea
                    </a>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="product-thread-table">
                        <div class="product-thread-table-header">
                            <a href="#" class="open">
                                <i class="fa fa-lightbulb-o" aria-hidden="true"></i>
                                @{
                                    var openCount = Model.Threads.Where(x => x.Status == Matterspace.Model.Enums.ThreadStatus.Pending).Count();
                                    // This is less expensive than using two wheres
                                    var closedCount = Model.Threads.Count() - openCount;
                                }
                                <span>@openCount open</span>
                            </a>
                            <a href="#" class="closed">
                                <i class="fa fa-check" aria-hidden="true"></i>
                                <span>@closedCount closed</span>
                            </a>
                        </div>
                        <div class="product-thread-table-body">
                            @foreach (var thread in Model.Threads)
                            {
                                <div class="product-thread-table-row">
                                    <div class="col-1">
                                        <i class="fa fa-caret-up" aria-hidden="true"></i>
                                    </div>
                                    <div class="col-2">
                                        <i class="fa fa-lightbulb-o" aria-hidden="true"></i>
                                    </div>
                                    <div class="col-3">
                                        <div class="title">
                                            @thread.Title  #@thread.Id <span class="badge badge-default">@thread.Category.Name</span>
                                        </div>
                                        <div class="subtitle">
                                            29 points by @thread.Author.UserName · 6 hours ago · 8 comments
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>
